use egui::{Color32, Visuals};
use serde::{Serialize, Deserialize};

#[derive(Clone, Copy, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct Color32Def(pub [u8; 4]);

impl From<Color32> for Color32Def {
    fn from(c: Color32) -> Self {
        Color32Def([c.r(), c.g(), c.b(), c.a()])
    }
}
impl From<Color32Def> for Color32 {
    fn from(c: Color32Def) -> Self {
        Color32::from_rgba_unmultiplied(c.0[0], c.0[1], c.0[2], c.0[3])
    }
}

#[derive(Clone, Serialize, Deserialize, Debug)]
pub struct CustomTheme {
    pub background: Color32Def,
    pub foreground: Color32Def,
    pub accent: Color32Def,
    pub warning: Color32Def,
    pub error: Color32Def,
    pub info: Color32Def,
    pub cpu_gauge: Color32Def,
    pub mem_gauge: Color32Def,
    pub net_gauge: Color32Def,
    pub disk_gauge: Color32Def,
    pub bar_fill: Color32Def,
    pub bar_bg: Color32Def,
    pub text_primary: Color32Def,
    pub text_secondary: Color32Def,
    pub text_disabled: Color32Def,
    pub border: Color32Def,
    pub separator: Color32Def,
    pub button: Color32Def,
    pub button_hovered: Color32Def,
    pub button_active: Color32Def,
    pub input_bg: Color32Def,
    pub input_fg: Color32Def,
    pub selection: Color32Def,
    pub highlight: Color32Def,
    pub alert_info: Color32Def,
    pub alert_warning: Color32Def,
    pub alert_critical: Color32Def,
    pub font_family: String,
    pub font_size: f32,
    pub border_thickness: f32,
    pub widget_rounding: f32,
    pub widget_padding: f32,
}

impl Default for CustomTheme {
    fn default() -> Self {
        Self {
            background: Color32::from_rgb(30, 30, 30).into(),
            foreground: Color32::from_rgb(220, 220, 220).into(),
            accent: Color32::from_rgb(0, 120, 220).into(),
            warning: Color32::YELLOW.into(),
            error: Color32::RED.into(),
            info: Color32::LIGHT_BLUE.into(),
            cpu_gauge: Color32::LIGHT_BLUE.into(),
            mem_gauge: Color32::LIGHT_GREEN.into(),
            net_gauge: Color32::LIGHT_YELLOW.into(),
            disk_gauge: Color32::LIGHT_RED.into(),
            bar_fill: Color32::from_rgb(0, 180, 120).into(),
            bar_bg: Color32::from_rgb(50, 50, 50).into(),
            text_primary: Color32::WHITE.into(),
            text_secondary: Color32::GRAY.into(),
            text_disabled: Color32::DARK_GRAY.into(),
            border: Color32::DARK_GRAY.into(),
            separator: Color32::GRAY.into(),
            button: Color32::from_rgb(60, 60, 60).into(),
            button_hovered: Color32::from_rgb(80, 80, 80).into(),
            button_active: Color32::from_rgb(100, 100, 100).into(),
            input_bg: Color32::from_rgb(40, 40, 40).into(),
            input_fg: Color32::WHITE.into(),
            selection: Color32::from_rgb(0, 120, 220).into(),
            highlight: Color32::from_rgb(255, 200, 0).into(),
            alert_info: Color32::LIGHT_BLUE.into(),
            alert_warning: Color32::YELLOW.into(),
            alert_critical: Color32::RED.into(),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 6.0,
            widget_padding: 8.0,
        }
    }
}

impl CustomTheme {
    pub fn apply(&self, ctx: &egui::Context) {
        let mut visuals = Visuals::dark();
        visuals.widgets.noninteractive.bg_fill = self.background.into();
        visuals.widgets.inactive.bg_fill = self.background.into();
        visuals.widgets.active.bg_fill = self.foreground.into();
        visuals.widgets.hovered.bg_fill = self.accent.into();
        visuals.widgets.open.bg_fill = self.accent.into();
        visuals.selection.bg_fill = self.selection.into();
        visuals.selection.stroke.color = self.highlight.into();
        visuals.faint_bg_color = self.background.into();
        visuals.extreme_bg_color = self.background.into();
        visuals.code_bg_color = self.input_bg.into();
        visuals.override_text_color = Some(self.text_primary.into());
        ctx.set_visuals(visuals);
    }
    pub fn light() -> Self {
        Self {
            background: Color32Def([255, 255, 255, 255]),
            foreground: Color32Def([30, 30, 30, 255]),
            accent: Color32Def([0, 120, 215, 255]),
            warning: Color32Def([255, 196, 0, 255]),
            error: Color32Def([232, 17, 35, 255]),
            info: Color32Def([0, 120, 215, 255]),
            cpu_gauge: Color32Def([0, 120, 215, 255]),
            mem_gauge: Color32Def([16, 124, 16, 255]),
            net_gauge: Color32Def([0, 153, 188, 255]),
            disk_gauge: Color32Def([255, 140, 0, 255]),
            bar_fill: Color32Def([0, 120, 215, 255]),
            bar_bg: Color32Def([230, 230, 230, 255]),
            text_primary: Color32Def([30, 30, 30, 255]),
            text_secondary: Color32Def([80, 80, 80, 255]),
            text_disabled: Color32Def([180, 180, 180, 255]),
            border: Color32Def([200, 200, 200, 255]),
            separator: Color32Def([220, 220, 220, 255]),
            button: Color32Def([240, 240, 240, 255]),
            button_hovered: Color32Def([220, 220, 220, 255]),
            button_active: Color32Def([200, 200, 200, 255]),
            input_bg: Color32Def([255, 255, 255, 255]),
            input_fg: Color32Def([30, 30, 30, 255]),
            selection: Color32Def([0, 120, 215, 255]),
            highlight: Color32Def([0, 120, 215, 80]),
            alert_info: Color32Def([0, 120, 215, 255]),
            alert_warning: Color32Def([255, 196, 0, 255]),
            alert_critical: Color32Def([232, 17, 35, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn dark() -> Self {
        Self {
            background: Color32Def([30, 30, 30, 255]),
            foreground: Color32Def([220, 220, 220, 255]),
            accent: Color32Def([0, 120, 215, 255]),
            warning: Color32Def([255, 196, 0, 255]),
            error: Color32Def([232, 17, 35, 255]),
            info: Color32Def([0, 120, 215, 255]),
            cpu_gauge: Color32Def([0, 120, 215, 255]),
            mem_gauge: Color32Def([16, 124, 16, 255]),
            net_gauge: Color32Def([0, 153, 188, 255]),
            disk_gauge: Color32Def([255, 140, 0, 255]),
            bar_fill: Color32Def([0, 120, 215, 255]),
            bar_bg: Color32Def([50, 50, 50, 255]),
            text_primary: Color32Def([220, 220, 220, 255]),
            text_secondary: Color32Def([180, 180, 180, 255]),
            text_disabled: Color32Def([80, 80, 80, 255]),
            border: Color32Def([60, 60, 60, 255]),
            separator: Color32Def([80, 80, 80, 255]),
            button: Color32Def([50, 50, 50, 255]),
            button_hovered: Color32Def([70, 70, 70, 255]),
            button_active: Color32Def([90, 90, 90, 255]),
            input_bg: Color32Def([30, 30, 30, 255]),
            input_fg: Color32Def([220, 220, 220, 255]),
            selection: Color32Def([0, 120, 215, 255]),
            highlight: Color32Def([0, 120, 215, 80]),
            alert_info: Color32Def([0, 120, 215, 255]),
            alert_warning: Color32Def([255, 196, 0, 255]),
            alert_critical: Color32Def([232, 17, 35, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn solarized_light() -> Self {
        Self {
            background: Color32Def([253, 246, 227, 255]),
            foreground: Color32Def([101, 123, 131, 255]),
            accent: Color32Def([38, 139, 210, 255]),
            warning: Color32Def([203, 75, 22, 255]),
            error: Color32Def([220, 50, 47, 255]),
            info: Color32Def([38, 139, 210, 255]),
            cpu_gauge: Color32Def([38, 139, 210, 255]),
            mem_gauge: Color32Def([133, 153, 0, 255]),
            net_gauge: Color32Def([42, 161, 152, 255]),
            disk_gauge: Color32Def([181, 137, 0, 255]),
            bar_fill: Color32Def([38, 139, 210, 255]),
            bar_bg: Color32Def([238, 232, 213, 255]),
            text_primary: Color32Def([101, 123, 131, 255]),
            text_secondary: Color32Def([147, 161, 161, 255]),
            text_disabled: Color32Def([238, 232, 213, 255]),
            border: Color32Def([147, 161, 161, 255]),
            separator: Color32Def([238, 232, 213, 255]),
            button: Color32Def([238, 232, 213, 255]),
            button_hovered: Color32Def([220, 220, 220, 255]),
            button_active: Color32Def([200, 200, 200, 255]),
            input_bg: Color32Def([253, 246, 227, 255]),
            input_fg: Color32Def([101, 123, 131, 255]),
            selection: Color32Def([38, 139, 210, 255]),
            highlight: Color32Def([38, 139, 210, 80]),
            alert_info: Color32Def([38, 139, 210, 255]),
            alert_warning: Color32Def([203, 75, 22, 255]),
            alert_critical: Color32Def([220, 50, 47, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn solarized_dark() -> Self {
        Self {
            background: Color32Def([0, 43, 54, 255]),
            foreground: Color32Def([131, 148, 150, 255]),
            accent: Color32Def([38, 139, 210, 255]),
            warning: Color32Def([203, 75, 22, 255]),
            error: Color32Def([220, 50, 47, 255]),
            info: Color32Def([38, 139, 210, 255]),
            cpu_gauge: Color32Def([38, 139, 210, 255]),
            mem_gauge: Color32Def([133, 153, 0, 255]),
            net_gauge: Color32Def([42, 161, 152, 255]),
            disk_gauge: Color32Def([181, 137, 0, 255]),
            bar_fill: Color32Def([38, 139, 210, 255]),
            bar_bg: Color32Def([7, 54, 66, 255]),
            text_primary: Color32Def([131, 148, 150, 255]),
            text_secondary: Color32Def([147, 161, 161, 255]),
            text_disabled: Color32Def([7, 54, 66, 255]),
            border: Color32Def([147, 161, 161, 255]),
            separator: Color32Def([7, 54, 66, 255]),
            button: Color32Def([7, 54, 66, 255]),
            button_hovered: Color32Def([20, 60, 80, 255]),
            button_active: Color32Def([40, 80, 100, 255]),
            input_bg: Color32Def([0, 43, 54, 255]),
            input_fg: Color32Def([131, 148, 150, 255]),
            selection: Color32Def([38, 139, 210, 255]),
            highlight: Color32Def([38, 139, 210, 80]),
            alert_info: Color32Def([38, 139, 210, 255]),
            alert_warning: Color32Def([203, 75, 22, 255]),
            alert_critical: Color32Def([220, 50, 47, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn vscode_light() -> Self {
        Self {
            background: Color32Def([255, 255, 255, 255]),
            foreground: Color32Def([51, 51, 51, 255]),
            accent: Color32Def([0, 120, 215, 255]),
            warning: Color32Def([255, 196, 0, 255]),
            error: Color32Def([232, 17, 35, 255]),
            info: Color32Def([0, 120, 215, 255]),
            cpu_gauge: Color32Def([0, 120, 215, 255]),
            mem_gauge: Color32Def([16, 124, 16, 255]),
            net_gauge: Color32Def([0, 153, 188, 255]),
            disk_gauge: Color32Def([255, 140, 0, 255]),
            bar_fill: Color32Def([0, 120, 215, 255]),
            bar_bg: Color32Def([230, 230, 230, 255]),
            text_primary: Color32Def([51, 51, 51, 255]),
            text_secondary: Color32Def([80, 80, 80, 255]),
            text_disabled: Color32Def([180, 180, 180, 255]),
            border: Color32Def([200, 200, 200, 255]),
            separator: Color32Def([220, 220, 220, 255]),
            button: Color32Def([240, 240, 240, 255]),
            button_hovered: Color32Def([220, 220, 220, 255]),
            button_active: Color32Def([200, 200, 200, 255]),
            input_bg: Color32Def([255, 255, 255, 255]),
            input_fg: Color32Def([51, 51, 51, 255]),
            selection: Color32Def([0, 120, 215, 255]),
            highlight: Color32Def([0, 120, 215, 80]),
            alert_info: Color32Def([0, 120, 215, 255]),
            alert_warning: Color32Def([255, 196, 0, 255]),
            alert_critical: Color32Def([232, 17, 35, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn vscode_dark() -> Self {
        Self {
            background: Color32Def([37, 37, 38, 255]),
            foreground: Color32Def([212, 212, 212, 255]),
            accent: Color32Def([0, 120, 215, 255]),
            warning: Color32Def([255, 196, 0, 255]),
            error: Color32Def([232, 17, 35, 255]),
            info: Color32Def([0, 120, 215, 255]),
            cpu_gauge: Color32Def([0, 120, 215, 255]),
            mem_gauge: Color32Def([16, 124, 16, 255]),
            net_gauge: Color32Def([0, 153, 188, 255]),
            disk_gauge: Color32Def([255, 140, 0, 255]),
            bar_fill: Color32Def([0, 120, 215, 255]),
            bar_bg: Color32Def([50, 50, 50, 255]),
            text_primary: Color32Def([212, 212, 212, 255]),
            text_secondary: Color32Def([180, 180, 180, 255]),
            text_disabled: Color32Def([80, 80, 80, 255]),
            border: Color32Def([60, 60, 60, 255]),
            separator: Color32Def([80, 80, 80, 255]),
            button: Color32Def([50, 50, 50, 255]),
            button_hovered: Color32Def([70, 70, 70, 255]),
            button_active: Color32Def([90, 90, 90, 255]),
            input_bg: Color32Def([37, 37, 38, 255]),
            input_fg: Color32Def([212, 212, 212, 255]),
            selection: Color32Def([0, 120, 215, 255]),
            highlight: Color32Def([0, 120, 215, 80]),
            alert_info: Color32Def([0, 120, 215, 255]),
            alert_warning: Color32Def([255, 196, 0, 255]),
            alert_critical: Color32Def([232, 17, 35, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn dracula() -> Self {
        Self {
            background: Color32Def([40, 42, 54, 255]),
            foreground: Color32Def([248, 248, 242, 255]),
            accent: Color32Def([80, 250, 123, 255]),
            warning: Color32Def([255, 184, 108, 255]),
            error: Color32Def([255, 85, 85, 255]),
            info: Color32Def([139, 233, 253, 255]),
            cpu_gauge: Color32Def([139, 233, 253, 255]),
            mem_gauge: Color32Def([80, 250, 123, 255]),
            net_gauge: Color32Def([189, 147, 249, 255]),
            disk_gauge: Color32Def([255, 121, 198, 255]),
            bar_fill: Color32Def([139, 233, 253, 255]),
            bar_bg: Color32Def([68, 71, 90, 255]),
            text_primary: Color32Def([248, 248, 242, 255]),
            text_secondary: Color32Def([189, 147, 249, 255]),
            text_disabled: Color32Def([68, 71, 90, 255]),
            border: Color32Def([68, 71, 90, 255]),
            separator: Color32Def([68, 71, 90, 255]),
            button: Color32Def([68, 71, 90, 255]),
            button_hovered: Color32Def([80, 250, 123, 255]),
            button_active: Color32Def([139, 233, 253, 255]),
            input_bg: Color32Def([40, 42, 54, 255]),
            input_fg: Color32Def([248, 248, 242, 255]),
            selection: Color32Def([189, 147, 249, 255]),
            highlight: Color32Def([139, 233, 253, 80]),
            alert_info: Color32Def([139, 233, 253, 255]),
            alert_warning: Color32Def([255, 184, 108, 255]),
            alert_critical: Color32Def([255, 85, 85, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
    pub fn nord() -> Self {
        Self {
            background: Color32Def([46, 52, 64, 255]),
            foreground: Color32Def([236, 239, 244, 255]),
            accent: Color32Def([94, 129, 172, 255]),
            warning: Color32Def([235, 203, 139, 255]),
            error: Color32Def([191, 97, 106, 255]),
            info: Color32Def([136, 192, 208, 255]),
            cpu_gauge: Color32Def([136, 192, 208, 255]),
            mem_gauge: Color32Def([163, 190, 140, 255]),
            net_gauge: Color32Def([129, 161, 193, 255]),
            disk_gauge: Color32Def([180, 142, 173, 255]),
            bar_fill: Color32Def([136, 192, 208, 255]),
            bar_bg: Color32Def([59, 66, 82, 255]),
            text_primary: Color32Def([236, 239, 244, 255]),
            text_secondary: Color32Def([129, 161, 193, 255]),
            text_disabled: Color32Def([59, 66, 82, 255]),
            border: Color32Def([59, 66, 82, 255]),
            separator: Color32Def([59, 66, 82, 255]),
            button: Color32Def([59, 66, 82, 255]),
            button_hovered: Color32Def([94, 129, 172, 255]),
            button_active: Color32Def([136, 192, 208, 255]),
            input_bg: Color32Def([46, 52, 64, 255]),
            input_fg: Color32Def([236, 239, 244, 255]),
            selection: Color32Def([94, 129, 172, 255]),
            highlight: Color32Def([136, 192, 208, 80]),
            alert_info: Color32Def([136, 192, 208, 255]),
            alert_warning: Color32Def([235, 203, 139, 255]),
            alert_critical: Color32Def([191, 97, 106, 255]),
            font_family: "Proportional".to_string(),
            font_size: 16.0,
            border_thickness: 1.0,
            widget_rounding: 4.0,
            widget_padding: 4.0,
        }
    }
} 